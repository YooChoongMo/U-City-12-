/*키패드 드라이버*/

 #include <linux/init.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/fs.h>
 #include <asm/uaccess.h>
 #include <linux/slab.h>

 #include <asm/arch/pxa-regs.h> //pin register header
 #include <linux/ioport.h> //pin register header
 #include <asm/hardware.h> //pin register header
 #include <asm/irq.h> //pin register header
 #include <linux/delay.h> //pin register header
 #include <linux/interrupt.h> //pin register header
 #include <asm/io.h> //pin register header

 #define KEY_BASE     0x14000000         //물리 주소라서 직접으로 사용 x
                         //현재 키패드에 눌린 결과 보관

unsigned long *keyport;
 static unsigned char key_buf = 0;
 void key_handler(int irq, void *dev_id, struct pt_regs *regs);

 static char *buffer = NULL;



 void key_handler(int irq, void *dev_id, struct pt_regs *regs)
 {
     unsigned char key_value;

     keyport = (unsigned long *) ioremap_nocache(KEY_BASE, 0x10);
     key_value = (*(keyport))&0xf;
     printk("KEY INPUT : [%d] input!!!!!\n", key_value);
     key_buf = key_value;
     iounmap(keyport);
 }


 int virtual_device_open(struct inode *inode, struct file *filp)
 {
   printk(KERN_ALERT "virtual_device open\n");

   return 0;
 }


 int virtual_device_release(struct inode *inode, struct file *filp)
 {
   printk(KERN_ALERT "virtual_device release\n");
   return 0;
 }


 ssize_t virtual_device_write(struct file *filp, const char *buf,
 size_t count, loff_t *f_pos)
 {
   printk(KERN_ALERT "virtual_device write\n");
   strcpy(buffer, buf);


   return count;
 }


 ssize_t virtual_device_read(struct file *filp, const char *buf, size_t
 count, loff_t *f_pos)
 {
   printk(KERN_ALERT "virtual_device read\n");
   copy_to_user(buf, buffer, 1024);


   return count;
 }

 static struct file_operations vd_fops=
 {
   .read = virtual_device_read,          //읽기모드 호출하면 얘를 사용
  .write = virtual_device_write,        //쓰기모드 호출하면 얘를 사용
  .open = virtual_device_open,          //오픈모드 호출하면 얘를 사용
  .release = virtual_device_release
 };

 int __init virtual_device_init(void)
 {
   int return_val;
 GPDR0 &= ~(1 << 0);

     set_GPIO_IRQ_edge(0, GPIO_RISING_EDGE);

     return_val = request_irq(IRQ_GPIO(0), key_handler, SA_INTERRUPT,
 "KEY PAD INT", NULL);
     if(return_val < 0)
     {
  printk(KERN_ERR "pxa255_pro_key_init() : Can't request irq %#010x\n",
 IRQ_GPIO(0));

     }

 if(register_chrdev(253, "virtual_device", &vd_fops)<0)
     printk(KERN_ALERT "driver init failed\n");

   else
         printk(KERN_ALERT "driver init successful\n");

   buffer = (char*)kmalloc(1024, GFP_KERNEL);

   if(buffer!=NULL)
     memset(buffer, 0, 1024);

 return 0;
 }

 void __exit virtual_device_exit(void)
 {
         free_irq(IRQ_GPIO(0), NULL);                            //switch

   unregister_chrdev(253, "virtual_device");
   kfree(buffer);
   printk(KERN_ALERT "driver exit successful\n");
 }

 module_init(virtual_device_init);
 module_exit(virtual_device_exit);
 MODULE_LICENSE("GPL");