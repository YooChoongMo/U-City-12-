LED_app.c

 #include <stdio.h>
 #include <unistd.h>
 #include <sys/fcntl.h>

 int main()
 {
   int dev, i;

   dev = open("/dev/virtual_device", O_RDWR);

   printf("dev:%d\n", dev);

   if(dev<0){
         printf("device open error\n");
         return -1;
         }

  for(; ;) {

         write(dev, "green off", 9);
         write(dev, "red off", 9);
         sleep(1);

         write(dev, "green on", 8);
         write(dev, "red off", 9);
         sleep(1);

         write(dev, "red on", 8);
         write(dev, "green off", 9);
         sleep(1);

         write(dev, "red on", 8);
         write(dev, "green on", 8);
         sleep(1);
   }

   close(dev);

   return 0;
 }

 LED_work.c

 #include <linux/init.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/fs.h>
 #include <asm/uaccess.h>
 #include <linux/slab.h>

 #include <asm/arch/pxa-regs.h> //pin register header
 #include <linux/ioport.h> //pin register header
 #include <asm/hardware.h> //pin register header
 #include <asm/irq.h> //pin register header
 #include <linux/delay.h> //pin register header

 static char *buffer = NULL;


 int virtual_device_open(struct inode *inode, struct file *filp)
 {

   printk(KERN_ALERT "virtual_device open\n");
   GPDR2 |= (1<<18);  //GPIO 82번을 1로 셋팅(출력으로 사용)
   GPDR2 |= (1<<19);  //GPIO 83번을 1로 셋팅(출력으로 사용)
   return 0;
 }


 int virtual_device_release(struct inode *inode, struct file *filp)
 {
   printk(KERN_ALERT "virtual_device release\n");
   return 0;
 }


 ssize_t virtual_device_write(struct file *filp, const char *buf,
 size_t count, loff_t *f_pos)
 {
   printk(KERN_ALERT "virtual_device write\n");
   strcpy(buffer, buf);

   if( !strcmp(buffer, "green on")){
     GPCR2 |= (1 << 18);
         }
   else if(!strcmp(buffer, "green off")){
     GPSR2 |= (1 << 18);
     }
   else if( !strcmp(buffer, "red on")){
     GPCR2 |= (1 << 19);
         }
   else if(!strcmp(buffer, "red off")){
     GPSR2 |= (1 << 19);
     }
   return count;
 }


 ssize_t virtual_device_read(struct file *filp, const char *buf, size_t
 count, loff_t *f_pos)
 {
   printk(KERN_ALERT "virtual_device read\n");
   copy_to_user(buf, buffer, 1024);

   return count;
 }

 static struct file_operations vd_fops=
 {
   .read = virtual_device_read,          //읽기모드 호출하면 얘를 사용
  .write = virtual_device_write,        //쓰기모드 호출하면 얘를 사용
  .open = virtual_device_open,          //오픈모드 호출하면 얘를 사용
  .release = virtual_device_release
 };

 int __init virtual_device_init(void)
 {
   if(register_chrdev(253, "virtual_device", &vd_fops)<0)
     printk(KERN_ALERT "driver init failed\n");

   else
         printk(KERN_ALERT "driver init successful\n");

   buffer = (char*)kmalloc(1024, GFP_KERNEL);

   if(buffer!=NULL)
     memset(buffer, 0, 1024);

   return 0;
 }

 void __exit virtual_device_exit(void)
 {
   unregister_chrdev(253, "virtual_device");
   kfree(buffer);
   printk(KERN_ALERT "driver exit successful\n");
 }

 module_init(virtual_device_init);
 module_exit(virtual_device_exit);
 MODULE_LICENSE("GPL");