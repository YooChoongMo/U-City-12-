Register GPIO<31:0>

==> 0번 bit 부터 31번 bit까지 

* 레지스터 한 개당 4바이트 => 32bit

- 특정 bit셋팅
 <클리어>		==> 0으로 셋팅
 GPLRO &= ~(1<<2);
 <셋팅>
 GPLRO |= ~(1<<2);

* GPLR (GPIO Level Register)
GPIO핀이 입력모드일 때 GPIO핀의 현재 입력 상태값(0 혹은 1)을 표시한다(현재값 읽어가는 것)

============================================================
ex) GPIO 5번 핀이 눌렸나 안눌렸나 확인하는 코드

(GPLR >> 5) & 1  ==> 1 이면 현재 상태 ( 1 )
(GPLR >> 5) & 1  ==> 0 이면 현재 상태 ( 0 )
============================================================


* GPDR (GPIO Direction Register) =========  
   
 < device.c => open 함수에 GPDR(입력 or 출력) 설정해준다. >

GPIO핀을 입력방향으로 할 것인지 출력방향으로 할 것인지를 결정 한다. 해당
필드가 1이면 출력이고 0이면 입력이다.(LED 출력 => 1로 셋팅)




==GPIO핀의 출력 셋팅==========

 < device.c => write 함수에서 셋팅 해줄 수 있다. >

* GPSR (GPIO Set Register)
- 1로 셋팅하는 레지스터

* GPCR (GPIO Clear Register) => 얘를 1로 하면 그 핀은 0이 되는것!!
- 0으로 셋팅하는 레지스터

==========================================================================================

LCD제어 => Frame buffer 이용

가로세로 해상도 검색하는 코드


ioctl() => 파일 컨트롤 하는 함수 
파라미터 => 1.fd , 2.명령어, 3. 정보를 저장할 구조체 변수 

==> 컴파일은
#arm-linux-gcc -I /root/PXA255-pro/Kernel/linux-2.4.19-pro3_usb20/include newcall_app.c -o newcall_app
	       아이

640 X 480
bpp : 16bit -> 픽셀당 16비트로 표현
length of frame memory : 614400


==============================================
R G B
5 6 5      ==> bit

pixel 한 개당 16bit -> 2byte

offset = 50줄 * 2byte 내려와서 + 100칸 이동

숙제 => LCD 바둑무늬 만들기

==============================================

 *interrup

=> palling방식을 무한루프에서 계속 read로 확인을 하는 방식
=>> 인터럽트는 하드웨어적으로 처리하는 방식 

DECLARE_WAIT_QUEUE_HEAD(wq); // read를 만나면 인터럽트 신호가 올때까지 기다린다.


==============================================

* 이미지파일 띄우기

480*640(-54)는 bmp파일의 헤더 부분 은 잘라내고
lseek ==> -(i*3)은 3바이트씩 읽겠다. 뒤에서부터
read () 끝에서 부터 3바이트씩 읽는다.

==============================================

* LED 드라이버

/root/PXA255-pro/Kernel/linux-2.4.19-pro3_usb20/drivers/char

보면 led_gpio.c 드라이버도 있고 내가 만든 드라이버를 복사해서 넣어도 된다.
=> 커널에 포함을 시켜버리는것!!!!!

insmod => 사용중인 커널에 실시간으로 모듈을 붙이는것!
	=> 보드를 끄면 사라짐!

============================================================================================

<pxa320>

Dot Matrix

도트당 8bit

volatile => 캐시 쓰지말고 다이렉트 주소로 가라고 할때


(*((volatile unsigned char *)(mem_fnd_cs0)))

=====================================================================================================

변수의 선언을 어떻게 하냐에 따라 변수의 특성이 달라질 수 있다.

- type -> 변화시키는 지정자
- 성질 -> 변화시키는 지정자
- 메모리특성 -> 변화시키는 지정자

<키워드>

register 변수 => register에 저장됨 
		(속도 빠름, 레지스터가 한정되서 여유분이 있을때만 저장됨/ 없으면 스택에 저장됨)
		(ARM 은 레지스터 풍부 (파라미터 4byte짜리 4개까지 저장 가능)
		(지역변수 처럼 함수안 or 블록 안)
		(자동 초기화 X)
		(유효시간도 짧다)

지역 변수 => 스택메모리 사용
 	     (지역변수 처럼 함수안 or 블록 안)		
	     (유효시간 짧다.)
	     (자동 초기화 X)

전역 변수 => 함수 밖에 선언
		(extern 다른 전역변수를 끌어다 쓸 수있다.)
		(사용범위 => 파일 전체 뿐만 아니라 다른 파일에서 끌어다 쓸 수 있음)
		(단, 사용하기 전 선언해놔야함)
		(유효시간 - 프로그램 시작부터 끝까지 // 가장 길다.)

static =>
	초기화 안하면 BSS영역에 저장
	초기화 자동 0
	함수 안 or 밖 사용 가능
	함수 안에서 쓰면 전역변수 처럼 사용 가능 => 정적 - (함수밖에서 주소값으로 접근 가능)
	다른파일에서 사용 X

=====================================================================================================

<타입 변화>

const		=> 변수 앞에 붙이면 변수의 성질을 read only로 바꿔줌
			(상수처럼, 값이나 주소를 바꾸지 못하게 할 때 사용
**const는 뒤에서 수식한다!!!(뒤에서 수식하는 것을 못바꾸게 한다)
int const *p => 값을 못바꾼다.
== const int *p



volatile	(최적화 진행시 빼려고 사용하는 경우가 많다)
		=> 보통 변수들은 캐시를 사용할 수 있는데 이걸 쓰면 캐시를 쓰지 말아라!!
		=> 캐시(CPU <=> ROM, RAM 의 속도차 줄이기 위해)
		=> 캐시(ROM, RAM 것을 일부 복사한것)
		=> 하드웨어에 저장시키려고 사용한다.
		=> 온도센서(로 부터 입력받는다) => 온도센서가 할당받은 메모리(read용 -> 값 변화 X)
		=> 사이드 이펙트로 최적화 진행시 volatile은 빼고 진행한다. (코드 제거 될 염려 X)
		=> 필요한 공루프를 사용할 때 volatile을 많이 붙인다. 

=====================================================================================================

7세그먼트 fnd (책 176쪽)

init에서 ioremap 을 통해 물리적 주소를 app이 직접접근이 안되서 
사시 메모리 할당 받는다.


=====================================================================================================

Char LCD

16글자 2줄

==> 32bit배열 선언!
==> 드라이버.c  에서 한 글자 쓰면 다음칸으로 자동으로 이동된다.
==> 줄 바꾸려면 mem_base_wr 주소값 바꾸면 된다.(0xC0)


APP.c

32비트 배열 선언 후
strcpy 문자열 복사로 배열에 입력후

write로 배열을 넣어 주면 된다.

=====================================================================================================

Key Matrix



<삼목 과제>
LCD에 바둑판 무늬 그리기 꼭지점 16개가 나오게 만듬

각각의 꼭지점이 키패드와 매칭

1P , 2P 만들고

번갈아 가면서 놓는다

1. 게임 시작 - 게임 스타트(Char LCD)
   1P - 블랙 , 2P - 화이트

2. 이미 놓은 자리에 놓으려면 에러 메세지 출력(다시 놓으세여)

3. 먼저 세개 채우면 끝 (Game Over)




































