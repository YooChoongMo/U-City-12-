
// MFCpppDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "MFCppp.h"
#include "MFCpppDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMFCpppDlg 대화 상자



CMFCpppDlg::CMFCpppDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_MFCPPP_DIALOG, pParent)
	, myEdit(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMFCpppDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_TREE1, myC);
	DDX_Text(pDX, IDC_EDIT1, myEdit);
}

BEGIN_MESSAGE_MAP(CMFCpppDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CMFCpppDlg::OnBnClickedButton1)
END_MESSAGE_MAP()


// CMFCpppDlg 메시지 처리기

BOOL CMFCpppDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CMFCpppDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CMFCpppDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CMFCpppDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CMFCpppDlg::OnBnClickedButton1()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.

	TVINSERTSTRUCT tInsert;     //트리 아이템에서 각각의 아이템에서 부모가 누구냐
	HTREEITEM Directory;
	
	//CString tpath = ".\\*.*";	//현재디렉토리 파일경로
	UpdateData(true);			//입력받은 경로 사용
	CString tpath = myEdit;

	tInsert.hParent = 0;  //최상위 위치를 의미(부모=0)
	tInsert.hInsertAfter = TVI_SORT;      //정렬 방법(알파벳 순)  / 멤버변수
	tInsert.item.mask = TVIF_TEXT;		  //변경할 것은 텍스트만 바꾸겠다 / 멤버변수
	tInsert.item.pszText = LPSTR(LPCTSTR(tpath));
	Directory = myC.InsertItem(&tInsert);      //트리에다 추가하기 / 객체할목을 food변수에 담기
	
	Search(tpath, Directory, tInsert);

}

void CMFCpppDlg::Search(CString myEdit, HTREEITEM Directory, TVINSERTSTRUCT  tInsert)
{

	///TVINSERTSTRUCT tInsert;               //트리 아이템에서 각각의 아이템에서 부모가 누구냐
										  //HTREEITEM Directory[10];
	HTREEITEM Directory2;
	
	//CString tpath = ".\\*.*";			//현재디렉토리 파일경로
	CString tpath = myEdit;


	CString files = "";
	CString dirs = "";

	CFileFind finder;					//파일 탐색하는 객체 생성
	
	BOOL flag = finder.FindFile(tpath); //Directory경로(true면 하나라도 있는거)
	CString fileName; //파일명
	CString DirName;  //폴더명


	while (flag)
	{
		flag = finder.FindNextFile();

		if (finder.IsArchived())
		{
			CString _fileName = finder.GetFileName();  //파일명+확장자 까지 가져오는 함수

													   //fileName = finder.GetFileTitle();    //파일명만 가져오는 함수
													   //files += _fileName + "\n";

			tInsert.hParent = Directory;                //파일들은 그냥 디렉토리밑으로 바로
			tInsert.item.pszText = LPSTR(LPCTSTR(_fileName));    //CString->LPSTR로 변환
			myC.InsertItem(&tInsert);
		}




		if (finder.IsDirectory())
		{
			CString _DirName = finder.GetFileName(); //폴더명 받아오기
			if (_DirName != "." && _DirName != "..")
			{

				tInsert.hParent = Directory;        //Directory->Directory_Sort(하위폴더)
				tInsert.item.pszText = LPSTR(LPCTSTR(_DirName));
				Directory2 = myC.InsertItem(&tInsert);

				
				CString Lpath;
				Lpath.Format("%s\\*.*", _DirName);
				BOOL flag2 = finder.FindFile(Lpath);  //그폴더로 접근
				if(flag2)
					return Search(Lpath, Directory2, tInsert);
				else
					return Search(tpath, Directory, tInsert);

			}

		}


	}

}
