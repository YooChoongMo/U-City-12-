
// puzzleDlg.h : 헤더 파일
//

#pragma once


// CpuzzleDlg 대화 상자
class CpuzzleDlg : public CDialogEx
{
	// 생성입니다.
public:
	CpuzzleDlg(CWnd* pParent = NULL);   // 표준 생성자입니다.

										// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_PUZZLE_DIALOG };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);   // DDX/DDV 지원입니다.


													   // 구현입니다.
protected:
	HICON m_hIcon;

	// 생성된 메시지 맵 함수
	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	DECLARE_MESSAGE_MAP()
public:
	afx_msg void OnBnClickedButton10();
	afx_msg void OnBnClickedButton9();


	afx_msg void OnBnClickedButton1();
	afx_msg void OnBnClickedButton2();
	afx_msg void OnBnClickedButton3();
	afx_msg void OnBnClickedButton4();
	afx_msg void OnBnClickedButton5();
	afx_msg void OnBnClickedButton6();
	afx_msg void OnBnClickedButton7();
	afx_msg void OnBnClickedButton8();

	CButton *pb[9];
	CString temp = "";
	CString temp2 = "";
	CString wh = "";
	int check = 0;            //버튼 번호
};





//////////////////////////////////////////////////////////////////


// puzzleDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "puzzle.h"
#include "puzzleDlg.h"
#include "afxdialogex.h"
#include <stdlib.h>
#include <time.h>
#define randomize() srand((unsigned int) time(NULL))
#define random(num)(rand()%(num))


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

	// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

														// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CpuzzleDlg 대화 상자



CpuzzleDlg::CpuzzleDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_PUZZLE_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CpuzzleDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CpuzzleDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON10, &CpuzzleDlg::OnBnClickedButton10)
	ON_BN_CLICKED(IDC_BUTTON9, &CpuzzleDlg::OnBnClickedButton9)
	ON_BN_CLICKED(IDC_BUTTON1, &CpuzzleDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &CpuzzleDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON3, &CpuzzleDlg::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON4, &CpuzzleDlg::OnBnClickedButton4)
	ON_BN_CLICKED(IDC_BUTTON5, &CpuzzleDlg::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_BUTTON6, &CpuzzleDlg::OnBnClickedButton6)
	ON_BN_CLICKED(IDC_BUTTON7, &CpuzzleDlg::OnBnClickedButton7)
	ON_BN_CLICKED(IDC_BUTTON8, &CpuzzleDlg::OnBnClickedButton8)
END_MESSAGE_MAP()


// CpuzzleDlg 메시지 처리기

BOOL CpuzzleDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);         // 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);      // 작은 아이콘을 설정합니다.

								  // TODO: 여기에 추가 초기화 작업을 추가합니다.
	pb[0] = (CButton*)GetDlgItem(IDC_BUTTON1);
	pb[1] = (CButton*)GetDlgItem(IDC_BUTTON2);
	pb[2] = (CButton*)GetDlgItem(IDC_BUTTON3);
	pb[3] = (CButton*)GetDlgItem(IDC_BUTTON4);
	pb[4] = (CButton*)GetDlgItem(IDC_BUTTON5);
	pb[5] = (CButton*)GetDlgItem(IDC_BUTTON6);
	pb[6] = (CButton*)GetDlgItem(IDC_BUTTON7);
	pb[7] = (CButton*)GetDlgItem(IDC_BUTTON8);
	pb[8] = (CButton*)GetDlgItem(IDC_BUTTON9);



	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CpuzzleDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CpuzzleDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CpuzzleDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


/*
int randnum(int start, int end)  //난수발생 함수
{
// seed 값
static int t = 0;
t++;// seed 값 중복되지 않게 지속적으로 변경
if (t > 1000) // 1000번 반복되면 적당하다고 생각함 이보다 더 한 수를 사용해도 무방함
t = 0;
srand(GetTickCount64() + t); // seed 값 생성
return (rand() % (end - start + t)) + start; // 난수 발생
}
*/



void CpuzzleDlg::OnBnClickedButton10()  //셔플 버튼
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.

//	int check = 0;
	int temp[8];
	
	srand(time(NULL));
	
	for (int i = 0; i < 8; i++)
	{
		temp[i] = rand() % 8 + 1;

		for (int a = 0; a < i; a++)
		{
			if (temp[i] == temp[a])
			{
				i--;
				break;
			}
		}
	}
	CString str = "";

	for (int m = 0; m < 8; m++)
	{
		str.Format("%d", temp[m]); // 정수를 문자열로 변환
		pb[m]->SetWindowText(str);
	}
	str = " ";
	pb[8]->SetWindowText(str);
	//   SetWindowText(str);//버튼 문자열 설정
	//   GetWindowText();////버튼 문자열 반환
	
}


void CpuzzleDlg::OnBnClickedButton1()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[0]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 2) || (check == 4)))
		{
			switch (check)
			{
			case 2:
				pb[0]->GetWindowText(temp); //보관  
				pb[1]->GetWindowText(temp2);

				pb[0]->SetWindowText(temp2);//바꿔서 저장
				pb[1]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 4:
				pb[3]->GetWindowText(temp); //보관  
				pb[0]->GetWindowText(temp2);

				pb[3]->SetWindowText(temp2);//바꿔서 저장
				pb[0]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			}
			check = 1;
		}
	}
	else
	{
		//click = true;
		check = 1;
	}

	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);
		
		int result = strcmp(ok[n], ch[n]);
		
		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}


void CpuzzleDlg::OnBnClickedButton2()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[1]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 1) || (check == 3) || (check == 5)))
		{
			switch (check)
			{
			case 1:
				pb[0]->GetWindowText(temp); //보관  
				pb[1]->GetWindowText(temp2);

				pb[0]->SetWindowText(temp2);//바꿔서 저장
				pb[1]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 5:
				pb[4]->GetWindowText(temp); //보관  
				pb[1]->GetWindowText(temp2);

				pb[4]->SetWindowText(temp2);//바꿔서 저장
				pb[1]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 3:
				pb[2]->GetWindowText(temp); //보관  
				pb[1]->GetWindowText(temp2);

				pb[2]->SetWindowText(temp2);//바꿔서 저장
				pb[1]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;
			}
			
			check = 2;
		}
	}
	else
	{
		//click = true;
		check = 2;
	}

	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}


void CpuzzleDlg::OnBnClickedButton3()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[2]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 2) || (check == 6)))
		{
			switch (check)
			{
			case 2:
				pb[1]->GetWindowText(temp); //보관  
				pb[2]->GetWindowText(temp2);

				pb[1]->SetWindowText(temp2);//바꿔서 저장
				pb[2]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 6:
				pb[5]->GetWindowText(temp); //보관  
				pb[2]->GetWindowText(temp2);

				pb[5]->SetWindowText(temp2);//바꿔서 저장
				pb[2]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			}
			
			check = 3;
		}
	}
	else
	{
		check = 3;
	}

	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}


void CpuzzleDlg::OnBnClickedButton4()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[3]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 1) || (check == 5) || (check == 7)))
		{
			switch (check)
			{
			case 1:
				pb[0]->GetWindowText(temp); //보관  
				pb[3]->GetWindowText(temp2);

				pb[0]->SetWindowText(temp2);//바꿔서 저장
				pb[3]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 5:
				pb[4]->GetWindowText(temp); //보관  
				pb[3]->GetWindowText(temp2);

				pb[4]->SetWindowText(temp2);//바꿔서 저장
				pb[3]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 7:
				pb[6]->GetWindowText(temp); //보관  
				pb[3]->GetWindowText(temp2);

				pb[6]->SetWindowText(temp2);//바꿔서 저장
				pb[3]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;
			}
			
			check = 4;
		}
	}
	else
	{
		check = 4;
	}
	
	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}


void CpuzzleDlg::OnBnClickedButton5()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[4]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 2) || (check == 4) || (check == 6) || (check == 8)))
		{
			switch (check)
			{
			case 2:
				pb[1]->GetWindowText(temp); //보관  
				pb[4]->GetWindowText(temp2);

				pb[1]->SetWindowText(temp2);//바꿔서 저장
				pb[4]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 4:
				pb[3]->GetWindowText(temp); //보관  
				pb[4]->GetWindowText(temp2);

				pb[3]->SetWindowText(temp2);//바꿔서 저장
				pb[4]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 6:
				pb[4]->GetWindowText(temp); //보관  
				pb[5]->GetWindowText(temp2);

				pb[4]->SetWindowText(temp2);//바꿔서 저장
				pb[5]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 8:
				pb[7]->GetWindowText(temp); //보관  
				pb[4]->GetWindowText(temp2);

				pb[7]->SetWindowText(temp2);//바꿔서 저장
				pb[4]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;
			}
			
			check = 5;
		}
	}
	else
	{
		check = 5;
	}
	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}


void CpuzzleDlg::OnBnClickedButton6()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[5]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 5) || (check == 3) || (check == 9)))
		{
			switch (check)
			{
			case 5:
				pb[4]->GetWindowText(temp); //보관  
				pb[5]->GetWindowText(temp2);

				pb[4]->SetWindowText(temp2);//바꿔서 저장
				pb[5]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 3:
				pb[2]->GetWindowText(temp); //보관  
				pb[5]->GetWindowText(temp2);

				pb[2]->SetWindowText(temp2);//바꿔서 저장
				pb[5]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 9:
				pb[8]->GetWindowText(temp); //보관  
				pb[5]->GetWindowText(temp2);

				pb[8]->SetWindowText(temp2);//바꿔서 저장
				pb[5]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;
			}
			
			check = 6;
		}
	}
	else
	{
		check = 6;
	}

	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}


void CpuzzleDlg::OnBnClickedButton7()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[6]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 4) || (check == 8)))
		{
			switch (check)
			{
			case 4:
				pb[3]->GetWindowText(temp); //보관  
				pb[6]->GetWindowText(temp2);

				pb[3]->SetWindowText(temp2);//바꿔서 저장
				pb[6]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 8:
				pb[6]->GetWindowText(temp); //보관  
				pb[7]->GetWindowText(temp2);

				pb[6]->SetWindowText(temp2);//바꿔서 저장
				pb[7]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;
			}
			
			check = 7;
		}
	}
	else
	{
		check = 7;
	}

	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}


void CpuzzleDlg::OnBnClickedButton8()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	pb[7]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 9) || (check == 7) || (check == 5)))
		{
			switch (check)
			{
			case 9:
				pb[8]->GetWindowText(temp); //보관  
				pb[7]->GetWindowText(temp2);

				pb[8]->SetWindowText(temp2);//바꿔서 저장
				pb[7]->SetWindowText(temp);
				temp = "";
				temp2 = "";

				break;

			case 7:
				pb[6]->GetWindowText(temp); //보관  
				pb[7]->GetWindowText(temp2);

				pb[6]->SetWindowText(temp2);//바꿔서 저장
				pb[7]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			case 5:
				pb[4]->GetWindowText(temp); //보관  
				pb[7]->GetWindowText(temp2);

				pb[4]->SetWindowText(temp2);//바꿔서 저장
				pb[7]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;
			}

			check = 8;
		}

	}

	else
	{
		
		check = 8;
	}
	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");


	//   SetWindowText(str);//버튼 문자열 설정
	//   GetWindowText();////버튼 문자열 반환
}


void CpuzzleDlg::OnBnClickedButton9()  //빈칸(움직이는 칸)
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.

	pb[8]->GetWindowText(wh);
	if (wh == " ")
	{
		if (((check == 6) || (check == 8)))
		{
			switch (check)
			{
			case 6:
				pb[8]->GetWindowText(temp); //보관  
				pb[5]->GetWindowText(temp2);

				pb[8]->SetWindowText(temp2);//바꿔서 저장
				pb[5]->SetWindowText(temp);
				temp = "";
				temp2 = "";

				break;

			case 8:
				pb[8]->GetWindowText(temp); //보관  
				pb[7]->GetWindowText(temp2);

				pb[8]->SetWindowText(temp2);//바꿔서 저장
				pb[7]->SetWindowText(temp);
				temp = "";
				temp2 = "";
				break;

			default: break;
			}

			check = 9;
		}

	}

	else
	{
	
		check = 9;
	}
	CString ch[8] = { "1","2","3","4","5","6","7","8" };
	CString ok[8];
	int final = 0;
	for (int n = 0; n < 8; n++)
	{
		pb[n]->GetWindowText(ok[n]);

		int result = strcmp(ok[n], ch[n]);

		if (result == 0)
			final++;     //같은지 비교
	}
	if (final == 8)      //8개 모두 같았을 때        
		MessageBox("퍼즐을 완성하였습니다!!");
}



