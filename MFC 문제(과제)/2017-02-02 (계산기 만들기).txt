/////////////////////////////////////////// MFCparac1Dlg.h : 헤더 파일
//

#pragma once


// CMFCparac1Dlg 대화 상자
class CMFCparac1Dlg : public CDialogEx
{
// 생성입니다.
public:
	CMFCparac1Dlg(CWnd* pParent = NULL);	// 표준 생성자입니다.

// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_MFCPARAC1_DIALOG };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV 지원입니다.


// 구현입니다.
protected:
	HICON m_hIcon;

	// 생성된 메시지 맵 함수
	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	DECLARE_MESSAGE_MAP()
public:
	afx_msg void OnBnClickedButton1(UINT id);
	
	
	afx_msg void OnEnChangeEdit1();
	CString result;
	
	int num1;
	int num2;
	int op;
	afx_msg void OnBnClickedButton11(UINT id);
	
	afx_msg void OnBnClickedButton15();
	afx_msg void OnBnClickedButton16();
};


///////////////////////////////////////////////////////////////// MFCparac1Dlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "MFCparac1.h"
#include "MFCparac1Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

	// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

														// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMFCparac1Dlg 대화 상자



CMFCparac1Dlg::CMFCparac1Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_MFCPARAC1_DIALOG, pParent)
	
	, result(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	num1 = 0;
	num2 = 0;
	op = 0;
}

void CMFCparac1Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);


	DDX_Text(pDX, IDC_EDIT1, result);
}

BEGIN_MESSAGE_MAP(CMFCparac1Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_COMMAND_RANGE(IDC_BUTTON1, IDC_BUTTON10, &CMFCparac1Dlg::OnBnClickedButton1)
	
	//OnBnClickedButton1 핸들러 함수를 1~10버튼에서 사용하겠다.
	//매개변수(UINT id)로 바꿔서COMMAND_RANGE로바뀜
	//여러개에서 함수를 쓸때!!!! 1~10버튼에서 사용
	ON_EN_CHANGE(IDC_EDIT1, &CMFCparac1Dlg::OnEnChangeEdit1)
	ON_COMMAND_RANGE(IDC_BUTTON11, IDC_BUTTON14, &CMFCparac1Dlg::OnBnClickedButton11)
	
	
	ON_BN_CLICKED(IDC_BUTTON15, &CMFCparac1Dlg::OnBnClickedButton15)
	ON_BN_CLICKED(IDC_BUTTON16, &CMFCparac1Dlg::OnBnClickedButton16)
END_MESSAGE_MAP()


// CMFCparac1Dlg 메시지 처리기

BOOL CMFCparac1Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

									// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CMFCparac1Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CMFCparac1Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CMFCparac1Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CMFCparac1Dlg::OnBnClickedButton1(UINT id) //(UINT id) 이벤트의 값이 뭔지 받아오기위해
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	/* 테스트용
	switch (id)
	{
	case IDC_BUTTON1:
		MessageBox("버튼1");
		break;
	case IDC_BUTTON2:
		MessageBox("버튼2");
		break;
	case IDC_BUTTON3:
		MessageBox("버튼3");
		break;
	case IDC_BUTTON4:
		MessageBox("버튼4");
		break;
	case IDC_BUTTON5:
		MessageBox("버튼5");
		break;
	case IDC_BUTTON6:
		MessageBox("버튼6");
		break;
	case IDC_BUTTON7:
		MessageBox("버튼7");
		break;
	case IDC_BUTTON8:
		MessageBox("버튼8");
		break;
	case IDC_BUTTON9:
		MessageBox("버튼9");
		break;
	case IDC_BUTTON10:
		MessageBox("버튼10");
		break;
	}*/
	
	CButton *b = (CButton*)GetDlgItem(id);
	CString str = "";

	b->GetWindowTextA(str);
	UpdateData(true);
	result += str;
	UpdateData(false);
}


void CMFCparac1Dlg::OnEnChangeEdit1()
{
	// TODO:  RICHEDIT 컨트롤인 경우, 이 컨트롤은
	// CDialogEx::OnInitDialog() 함수를 재지정 
	//하고 마스크에 OR 연산하여 설정된 ENM_CHANGE 플래그를 지정하여 CRichEditCtrl().SetEventMask()를 호출하지 않으면
	// 이 알림 메시지를 보내지 않습니다.

	// TODO:  여기에 컨트롤 알림 처리기 코드를 추가합니다.
}




void CMFCparac1Dlg::OnBnClickedButton11(UINT id)
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	UpdateData(true);
	num1 = _ttoi(result);
	switch (id)
	{
	case IDC_BUTTON11:
		op = 1;
		break;

	case IDC_BUTTON12:
		op = 2;
		break;
	case IDC_BUTTON13:
		op = 3;
		break;
	case IDC_BUTTON14:
		op = 4;
		break;
	
	}

	result = "";
	UpdateData(false);

}




void CMFCparac1Dlg::OnBnClickedButton15()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	UpdateData(true);   //edit control 에 있는 값 받아와서
	int x = 0;

	num2 = _ttoi(result);
	switch (op)
	{
	case 1:
		x = num1 + num2;
		break;

	case 2:
		x = num1 - num2;
		break;
	case 3:
		x = num1 * num2;
		break;
	case 4:
		if (num2 == 0) 
		{ 
			MessageBoxA("불능"); 
			x = 0;
			break;
		}

		else
		x = num1 / num2;

		break;
	}

	result.Format("%d",x);  // 정수 x값을 문자 형식으로 변환
	UpdateData(false);
	num1 = 0;
	num2 = 0;
	op = 0;
}


void CMFCparac1Dlg::OnBnClickedButton16()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.

	result = "";
	UpdateData(false);

}
