**프로젝트 설정 - 문자집합 -  (멀티바이트로 설정!)

자주 쓰는 함수

int GetCurSel()		- 선택한 항목 인덱스 반환(int idx = GetCurSell();)
GetText(int idx, "")    - idx위치의 문자열 반환(""여기에 myEdit을 넣으면 바로 myEdit에 반환됨
DeleteString(int idx)	- idx위치의 문자열 삭제(수정을 할땐 삭제를 해주고 그 인덱스 위치에 새로운 문자열 삽입)
GetSize() - list의 개수 반환
GetAt(i) - list의 요소


1. afx_msg 키워드
   afx_msg void OnPaint();

2. MFCApplication1.cpp 
   BEGIN_MESSAGE_MAP(CMFCApplication1App, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp) 윈도우즈 UI 전체 명령어나 핸들러가 등록

3. extern 으로 전역변수 사용하려면 header파일에 놓지 말기! 항상 헤더파일 추가하기때문에 충돌남


<MFCApplication1Dlg.cpp : 구현 파일>
4. BEGIN_MESSAGE_MAP(CMFCApplication1Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CMFCApplication1Dlg::OnBnClickedButton1)
   END_MESSAGE_MAP()

우리가 어떤 핸들러를 추가하면 여기에 계속 추가가됨

5. BOOL CMFCApplication1Dlg::OnInitDialog()
// TODO: 여기에 추가 초기화 작업을 추가합니다.
(초기화 할게 있으면 여기에다가 )

6. 모달 / 비모달(어떤 창이 떳을때 확인을 안누르면 뒤에 창을 누를 수 없음)
void CMFCApplication1Dlg::OnSysCommand(UINT nID, LPARAM lParam)
여기서 설정

7. void CMFCApplication1Dlg::OnPaint() 그림그리기위한 클래스
두께, 색상, 크기 등

////////////////////////////////////////////////////////계산기
/////다이얼로그 창
도구- Edit control- 우클릭 - 변수추가
범주-value
변수 형식 CString 문자열
CMFCApplication1Dlg::DoDataExchange(CDataExchange* pDX)에 추가가됨(cpp파일에)

void CMFCApplication1Dlg::OnBnClickedButton3()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	UpdateData(true); 
	MessageBox(str);   //보여주는 창 띄움
}
UpdateData(TRUE);   // ->컨트롤 값을 변수로 전송 (UI에 입력된 값을 변수에 저장)

UpdateData(FALSE); // ->변수의 값을 컨트롤로 전송 (변수에 저장된 값을 UI에 입력) //뷰에다가 출력

8.
ON_COMMAND_RANGE(IDC_BUTTON1, IDC_BUTTON10, &CMFCparac1Dlg::OnBnClickedButton1)  
	//OnBnClickedButton1 핸들러 함수를 1~10버튼에서 사용하겠다.
	//매개변수(UINT id)로 바꿔서COMMAND_RANGE로바뀜
	//여러개에서 함수를 쓸때!!!! 1~10버튼에서 사용

void CMFCparac1Dlg::OnBnClickedButton1(UINT id) //(UINT id) 이벤트의 값이 뭔지 받아오기위해
{
	
	CButton *b = (CButton*)GetDlgItem(id);
	CString str = "";

	b->GetWindowTextA(str); //버튼의 이름을 str에 복사
	UpdateData(true);
	result += str;
	UpdateData(false);
}

	
9. 클래스 마법사(edit control) -> 멤버변수 -> 사용자 지정 추가 
//헤더랑 초기화 자동으로 써줌



////////////////////////////////////////////////////////////////  라디오 버튼에 따라 콤보박스 내용 달라지기!!


radio button => 변수추가

comboBox ==> 누르고 ==> 창에서 Data 에다가 => 1.사과;2.포도;3.배 =>세미콜론으로 구분 입력
==> 변수 추가(value)

CComboBox *pCombo = (CComboBox*)GetDlgItem(IDC_COMBO1);       //포인터 설정
	pCombo->ResetContent();				      //Data모두 삭제
	pCombo->AddString("T셔츠");			      //Data 추가
	pCombo->AddString("바지");
	pCombo->AddString("자켓");
	pCombo->AddString("코트");


..prac3
//////////////////////////////////////////////리스트 박스 (정렬sort => false로 하기)
변수추가 -> control

OnInitDialog()에서 초기화 추가 시키는 부분에서

1.리스트 박스 직접 초기화
// TODO: 여기에 추가 초기화 작업을 추가합니다.
 myList.AddString("aaa");
 myList.AddString("bbb");
 myList.AddString("ccc");
 UpdateData(false);

//AddString은 뒤에다 추가
//InsertString은 index값,내용 쓰면 원하는 위치에 추가!


2.Edit control 추가
변수추가 - value

3.버튼 만들기

내용 쓰고 -> 추가 -> 리스트 추가
UpdateData(true);
myList.AddString(myEdit);
myEdit = "";       	 //추가 하고 Edit창 지워지게
UpdateData(false);

//수정
	int idx;
	idx = myList.GetCurSel();
	myList.DeleteString(idx);
	UpdateData(true);
	myList.InsertString(idx, myEdit);
	myEdit = "";
//삭제
	int idx;
	idx = myList.GetCurSel();
	myList.DeleteString(idx);

for (int i = 0; i < list.GetSize(); i++)       //GetSize() list의 개수 반환
	{
		myList.AddString(list.GetAt(i).name);	   //GetAt은 요소
	}


..prac4
///////////////////////////////////////////// list control
변수 추가 -> control
속성 => view에서 보이게 할 형태 선택! 

다음
1. 초기화
	char *str[3] = { "name", "email", "tel" };
	int colW[3] = { 60, 100, 100 }; //가로길이   
	//컬럼의 길이(이름은 짧고, 이메일은 길고)=>폴더열면 이름, 수정날짜 이런 칸
	LVCOLUMN cols;  //컬럼 객체를 하나 만듬
	cols.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_TEXT | LVCF_WIDTH; 
	//포맷, 서브항복, 텍스트, 가로길이 => 변경전 설정 할거라고 말함
	cols.fmt = LVCFMT_LEFT; //왼쪽 정렬

	for (int i = 0; i < 3; i++) //이름, 메일, tel 세 개
	{
		cols.pszText = str[i];
		cols.iSubItem = i;
		cols.cx = colW[i];  //까지 컬럼을 설정
		mylistcontrol.InsertColumn(i, &cols); //컬럼을 추가(i번째 index에다가)
	}
2. 버튼(추가)
		item.iSubItem = 0;
		//subitem 은 name | email뜨는 맨 윗줄 인덱스
		//iItem 은 항목의 줄번호
		sprintf(str, "%s", name);
		//메모리에다 출력하는 함수
		//sprintf(str, "%s%d", name,정수...등등);
		//str에다가 정수를 쓰든 문자를 쓰든 짬뽕 모두 가능!!!
		item.pszText = (LPSTR)str;
		mylistcontrol.InsertItem(&item);  //맨처음은 InserItem으로(새로운 줄을 만들기!!)

		item.iSubItem = 1;
		sprintf(str, "%s", email);
		item.pszText = (LPSTR)str;
		mylistcontrol.SetItem(&item);     //그 다음부터는 만든 줄에다가 값을 추가하는 방식!!


/////////////////// 02- 06 (RBG 스크롤러)
프로젝트 만든 후 우클릭 -> 추가 -> 리소스 -> 메뉴

메뉴이름 -> &File (&를 붙이면 단축키 기능 부가)
경계선 만들고 싶으면 -> 오른쪽 속성에서 Separator
메뉴 핸들러 만들려면-> 다이얼로그 화면에서 우클릭 -> 클래스 마법사(명령)_ 메뉴애들 이름 확인 후 그에 맞는거 선택
//다이얼로그 창 -> 속성 -> Menu -> 내가 만든 메뉴 선택 후 컴파일 하면 메뉴 생김!

스크롤 변수 추가 -> control
Init에서 스크롤 초기화
클래스 마법사 -> (메세지)MWvscroll 추가

onpaint() 맨밑

///////////////////////////////// Tree Control
변수추가 - controll
속성 has button, has lines , lines at root 등등 알아서 설정

버튼 -> 


///////////////////02-07
tap control

프로젝트 -> 추가 ->  리소스 -> 다이얼로그
대화상자 
static text 추가
다이얼로그 -> 클래스 추가 -> 기본클래스(CPropertyPage) 추가
똑같이 하나 더 만듬

원래 다이얼로그 가서 클래스 마법사 -> 클래스 추가 ->
원래 다이얼로그 가서 클래스 마법사 -> 멤버변수 -> 사용자지정
형식 Page1 객체 생성
형식 Page2 객체 생성


///////////////////// Dialog Text
시작하자마자 화면에 띄우려면 Onpaint()에 넣어놔라

	CClientDC dc(this); //화면에 출력하려면 가상메모리 할당
	dc.SetTextColor(RGB(255, 0, 0));
	dc.TextOut(10, 30, "빨간색의 텍스트");  //텍스트 출력하는 함수(좌표x, 좌표y)
	dc.SetBkColor(RGB(0, 0, 255));
	dc.TextOut(10, 50, "파란색의 텍스트");
	dc.SetBkMode(TRANSPARENT);		//모드를 저걸로 하면 투명하게
	dc.TextOut(10, 70, "바탕이 투명한 텍스트");


마우스 동작에 따른 메세지

WM_MOUSEMOVE : 마우스 볼이 움직임
WM_LBUTTONDOWN : 왼쪽버튼 클릭
WM_LBUTTONUP : 왼쪽버튼 눌렀다 뗐을 때
WM_RBUTTONDOWN : 오른쪽버튼 클릭
WM_RBUTTONUP : 오른쪽버튼 눌렀다 뗐을 때
WM_LBUTTONBLCK : 왼쪽 더블클릭
WM_NCMOUSEMOVE : 마우스 커서 클라이언트 영역 밖으로 이동
WM_SETCURSER : 커서의 변경이 필요할때(커서 위치 세팅)

다이얼로그-> 클래스 마법사-> 메세지


/////////////////////// 선그리기(제목은 점그리기로 잘못함)

다이얼로그 클래스마법사 -> 변수 추가 -> 
형식 : CPoint
이름 :MyPoint

//선그리기
OnLButtonDown(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.

	MyPoint = point;    //현재 포인트값 복사

	CDialogEx::OnLButtonDown(nFlags, point);
}

OnLButtonUp(UINT nFlags, CPoint point)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.

	CClientDC dc(this);
	CPen pen(PS_SOLID, 3, RGB(rand() % 255, rand() % 255, rand() % 255));
	// 선 종류(실선) , 두께, 색상
	//Brush는색칠 용도

	CPen *OldPen;
	OldPen = dc.SelectObject(&pen);
	dc.MoveTo(MyPoint);
	dc.LineTo(point);
	dc.SelectObject(OldPen);  //사용했던 펜 반환

	CDialogEx::OnLButtonUp(nFlags, point);
}

//삭제버튼
void CMFC점그리기Dlg::OnBnClickedButton1()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	
	Invalidate(true);     //초기화된 화면 

}

//타원그리기
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.

	CClientDC dc(this);
	CPen pen(PS_SOLID, 3, RGB(0, 255, 0));
	CPen *oldPen = dc.SelectObject(&pen);
	CBrush br(RGB(255, 0, 0));
	CBrush *oldBr = dc.SelectObject(&br);
	dc.Ellipse(10, 30, 190, 150);  //좌표 두개로 타원그리기
	dc.SelectObject(oldPen);//사용한 자원 반환
	dc.SelectObject(oldBr); //사용한 자원 반환
}


/////////////////////////// FileIO

2개 Edit 만들고
2번째꺼 속성 멀티라인-> 트루


/////////////// FileIO 아카이브 이용

