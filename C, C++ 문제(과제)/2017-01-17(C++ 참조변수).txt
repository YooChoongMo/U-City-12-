#include <iostream>
#include <stdlib.h>
#include <cstring>
#include <string.h>

#define _CRT_SECURE_NO_DEPRECATE

using namespace std;

void swapr(int &a, int &b);
void swapv(int a, int b);
void swapp(int *a, int *b);

int main()
{
	int wallet1 = 1000;
	int wallet2 = 2000;


	cout <<"wallet1= "<< wallet1<<endl;
	cout <<"wallet2= "<< wallet2<<endl;

	cout <<"참조를 이용하여 내용들을 교환 \n"	;

	swapr(wallet1, wallet2);
	cout <<"wallet1= "<< wallet1<<endl;
	cout <<"wallet2= "<< wallet2<<endl;

	cout <<"포인터를 이용하여 내용들을 교환 \n";
	swapp(&wallet1, &wallet2);
	cout <<"wallet1= "<< wallet1<<endl;
	cout <<"wallet2= "<< wallet2<<endl;
	
	cout <<"값 이용하여 내용들을 교환 \n";            //교환 실패 (값만 가져오기 때문에 함수종료시 메모리 해제->변화x
	swapv(wallet1, wallet2);
	cout <<"wallet1= "<< wallet1<<endl;
	cout <<"wallet2= "<< wallet2<<endl;

	return 0;
}
void swapr(int &a, int &b)
{
	int temp;

	temp = a;
	a = b;
	b = temp;
}

void swapp(int *a, int *b)
{	
	int temp;

	temp = *a;
	*a = *b;
	*b = temp;
}

void swapv(int a, int b)
{	
	int temp;

	temp = a;
	a = b;
	b = temp;
}
///////////////////////////////////
#include <iostream>
#include <stdlib.h>
#include <cstring>
#include <string.h>

#define _CRT_SECURE_NO_DEPRECATE

using namespace std;

 class Counter
{

	char name[30];
	
	double balance;
public:	

	void plus(void)
	{
		balance=0;
		balance++;
		cout<<balance<<endl;   //내부접근
	
	}
 
 };


int main()
{

	Counter cnt;
	//cnt.balance = 0;
	//cout<<cnt.balance<<endl;

	cnt.plus();
	//cout<<cnt.balance;



	return 0;
}
